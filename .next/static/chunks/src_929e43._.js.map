{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/agimanifesto/_dev/portfolio/src/components/BentoBox.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport React, { type JSX } from \"react\";\n\n/**\n * Props for the BentoBox component.\n */\nexport interface BentoBoxProps {\n  /**\n   * The child elements to render inside the box.\n   * Optional when isLoading is true.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * The variant of the BentoBox. Defaults to \"regular\".\n   */\n  variant?: \"featured\" | \"regular\";\n\n  /**\n   * Additional custom class names for the BentoBox.\n   */\n  className?: string;\n\n  /**\n   * Click handler for the BentoBox.\n   */\n  onClick?: () => void;\n\n  /**\n   * Disabled state for the BentoBox.\n   */\n  disabled?: boolean;\n\n  /**\n   * Loading state for the BentoBox.\n   */\n  isLoading?: boolean;\n\n  /**\n   * Size of the BentoBox. Defaults to \"small\".\n   */\n  size?: 'small' | 'medium' | 'large';\n}\n\n/**\n * A flexible box component with hover effects, used to display content in different visual styles.\n *\n * @param props - The props object.\n * @returns The rendered BentoBox component.\n */\nexport function BentoBox({\n  children,\n  variant = \"regular\",\n  className = \"\",\n  onClick,\n  disabled = false,\n  isLoading = false,\n  size = 'small',\n}: BentoBoxProps): JSX.Element {\n  const sizeClasses = {\n    small: 'col-span-4 md:col-span-2 lg:col-span-1 row-span-1',\n    medium: 'col-span-4 md:col-span-2 lg:col-span-2 row-span-1',\n    large: 'col-span-4 md:col-span-4 lg:col-span-2 row-span-2',\n  }[size];\n\n  return (\n    <div\n      className={clsx(\n        \"card overflow-hidden bg-base-100 transition-all duration-300 h-full\",\n        !disabled && !isLoading && \"hover:scale-[1.02] hover:shadow-xl\",\n        disabled && \"opacity-60 cursor-not-allowed\",\n        variant === \"featured\" ? \"aspect-video\" : \"aspect-square\",\n        sizeClasses,\n        className,\n      )}\n      role={variant === \"featured\" ? \"region\" : \"article\"}\n      onClick={!disabled && !isLoading ? onClick : undefined}\n      aria-disabled={disabled || isLoading}\n    >\n      {isLoading ? (\n        <div className=\"card-body animate-pulse p-4\">\n          <div className=\"skeleton h-32 w-full\" />\n          <div className=\"space-y-3\">\n            <div className=\"skeleton h-4 w-3/4\" />\n            <div className=\"skeleton h-4 w-1/2\" />\n          </div>\n        </div>\n      ) : (\n        <div className=\"card-body p-4\">{children}</div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAkDO,SAAS,SAAS,EACvB,QAAQ,EACR,UAAU,SAAS,EACnB,YAAY,EAAE,EACd,OAAO,EACP,WAAW,KAAK,EAChB,YAAY,KAAK,EACjB,OAAO,OAAO,EACA;IACd,MAAM,cAAc;QAClB,OAAO;QACP,QAAQ;QACR,OAAO;IACT,CAAC,CAAC,KAAK;IAEP,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACZ,uEACA,CAAC,YAAY,CAAC,aAAa,sCAC3B,YAAY,iCACZ,YAAY,aAAa,iBAAiB,iBAC1C,aACA;QAEF,MAAM,YAAY,aAAa,WAAW;QAC1C,SAAS,CAAC,YAAY,CAAC,YAAY,UAAU;QAC7C,iBAAe,YAAY;kBAE1B,0BACC,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;;;;;8BACf,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;;;;;sCACf,6LAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;iCAInB,6LAAC;YAAI,WAAU;sBAAiB;;;;;;;;;;;AAIxC;KA1CgB"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///Users/agimanifesto/_dev/portfolio/src/components/Bounded.tsx"],"sourcesContent":["import React, { type JSX } from \"react\";\nimport clsx from \"clsx\"; // Utility for conditional className merging. Preferred over string concatenation for cleaner, more maintainable code and handling conditional class logic effectively.\n\n/**\n * Props for the Bounded component.\n * @typedef {Object} BoundedProps\n * @property {React.ElementType} [as=\"div\"] - The component or HTML tag to render (e.g., div, section, article, custom components). Must be a valid React element type.\n * @property {React.ReactNode} children - The content to be wrapped within the component.\n * @property {string} [className=\"\"] - Additional custom classes to be applied. If a conflict arises between default and custom classes, the custom `className` will override defaults where applicable. Test edge cases where className conflicts with padding or width classes to ensure predictable behavior.\n * @property {\"small\" | \"base\" | \"wide\" | \"widest\"} [size=\"base\"] - Predefined size options for width classes.\n * @property {string} [paddingXClass=\"px-4 sm:px-8 md:px-12 lg:px-16\"] - Custom horizontal padding classes to override defaults.\n * @property {string} [paddingYClass=\"\"] - Custom vertical padding classes to override defaults.\n */\n\n// Props definition for the Bounded component\ninterface BoundedProps {\n  as?: React.ElementType<React.HTMLAttributes<HTMLElement>>; // Allows specifying any valid HTML tag or custom component for rendering. Must adhere to valid React element types.\n  children: React.ReactNode; // Defines the content to be wrapped within the component, ensure proper validation when rendered\n  className?: string; // Additional custom classes to be applied. If conflicts arise, custom classes take precedence.\n  size?: \"small\" | \"base\" | \"wide\" | \"widest\"; // Predefined size options for width classes\n  paddingXClass?: string; // Custom horizontal padding classes for flexibility in layout design\n  paddingYClass?: string; // Custom vertical padding classes for flexibility in layout design\n}\n\n/**\n * Bounded is a layout component that provides consistent padding,\n * maximum width, and centering for its children.\n *\n * Example usage:\n * ```jsx\n * <Bounded as=\"section\" size=\"wide\" className=\"bg-gray-100\" paddingXClass=\"px-6\" paddingYClass=\"py-4\">\n *   <h1 className=\"text-2xl font-bold\">Welcome</h1>\n *   <p>This is a flexible and reusable layout component.</p>\n * </Bounded>\n * ```\n *\n * @component\n * @param {BoundedProps} props - The properties for the component.\n * @returns {JSX.Element} A React component with specified padding and layout styles.\n */\nconst Bounded = ({\n  as: Component = \"div\", // Default to rendering a <div> if no tag is provided\n  children,\n  className = \"\", // Default to an empty string if no className is passed\n  size = \"base\", // Default size option\n  paddingXClass = \"px-4 sm:px-8 md:px-12 lg:px-16\", // Default horizontal padding classes\n  paddingYClass = \"\", // Default vertical padding classes\n}: BoundedProps): JSX.Element => {\n  const sizeClass = clsx(\n    size === \"small\" && \"max-w-xl\",\n    size === \"base\" && \"max-w-3xl\",\n    size === \"wide\" && \"max-w-4xl\",\n    size === \"widest\" && \"max-w-6xl\",\n  );\n\n  return (\n    <Component\n      /**\n       * Combines the base padding, width, and centering classes\n       * with any additional classes provided through className.\n       * The padding classes ensure flexible spacing, while width classes control content width for readability and alignment.\n       */\n      className={clsx(\n        paddingXClass,\n        paddingYClass,\n        sizeClass,\n        \"mx-auto\",\n        className,\n      )}\n    >\n      {children} {/* Render the children elements inside the component */}\n    </Component>\n  );\n};\n\nexport default Bounded;\n"],"names":[],"mappings":";;;;AACA,4OAAyB,uKAAuK;;;AAuBhM;;;;;;;;;;;;;;;CAeC,GACD,MAAM,UAAU,CAAC,EACf,IAAI,YAAY,KAAK,EACrB,QAAQ,EACR,YAAY,EAAE,EACd,OAAO,MAAM,EACb,gBAAgB,gCAAgC,EAChD,gBAAgB,EAAE,EACL;IACb,MAAM,YAAY,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACnB,SAAS,WAAW,YACpB,SAAS,UAAU,aACnB,SAAS,UAAU,aACnB,SAAS,YAAY;IAGvB,qBACE,6LAAC;QACC;;;;OAIC,GACD,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACZ,eACA,eACA,WACA,WACA;;YAGD;YAAS;;;;;;;AAGhB;KAjCM;uCAmCS"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/agimanifesto/_dev/portfolio/src/slices/AboutMeSlice/index.tsx"],"sourcesContent":["import { BentoBox } from \"@/components/BentoBox\";\nimport Bounded from \"@/components/Bounded\";\nimport { Content } from \"@prismicio/client\";\nimport { PrismicNextLink } from \"@prismicio/next\";\n\nimport { PrismicRichText, SliceComponentProps } from \"@prismicio/react\";\nimport type { JSX } from \"react\";\n\n/**\n * Props for `AboutMeSlice`.\n */\nexport type AboutMeSliceProps = SliceComponentProps<Content.AboutMeSliceSlice>;\n\n/**\n * Component for \"AboutMeSlice\" Slices.\n */\nconst AboutMeSlice = ({ slice }: AboutMeSliceProps): JSX.Element => {\n  return (\n    <section\n      data-slice-type={slice.slice_type}\n      data-slice-variation={slice.variation}\n    >\n      <Bounded>\n        <BentoBox className=\"text-center\">\n        <PrismicRichText field={slice.primary.about_me_text} />\n        <PrismicNextLink field={slice.primary.get_in_touch_cta}>\n          {slice.primary.get_in_touch_cta.text}\n          </PrismicNextLink>\n          </BentoBox>\n      </Bounded>\n    </section>\n  );\n};\n\nexport default AboutMeSlice;\n"],"names":[],"mappings":";;;;AAAA;AACA;AAIA;AAFA;;;;;;AAUA;;CAEC,GACD,MAAM,eAAe,CAAC,EAAE,KAAK,EAAqB;IAChD,qBACE,6LAAC;QACC,mBAAiB,MAAM,UAAU;QACjC,wBAAsB,MAAM,SAAS;kBAErC,cAAA,6LAAC,gIAAA,CAAA,UAAO;sBACN,cAAA,6LAAC,iIAAA,CAAA,WAAQ;gBAAC,WAAU;;kCACpB,6LAAC,kKAAA,CAAA,kBAAe;wBAAC,OAAO,MAAM,OAAO,CAAC,aAAa;;;;;;kCACnD,6LAAC,iKAAA,CAAA,kBAAe;wBAAC,OAAO,MAAM,OAAO,CAAC,gBAAgB;kCACnD,MAAM,OAAO,CAAC,gBAAgB,CAAC,IAAI;;;;;;;;;;;;;;;;;;;;;;AAM9C;KAhBM;uCAkBS"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}